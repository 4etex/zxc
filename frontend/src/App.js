import React, { useState, useEffect } from "react";
import "./App.css";
import axios from "axios";

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const DashboardStats = ({ stats, onRefresh }) => {
  if (!stats) return <div className="text-center">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>;

  return (
    <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h2>
        <button 
          onClick={onRefresh}
          className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-4 rounded-lg">
          <div className="text-3xl font-bold">{stats.totals?.trends || 0}</div>
          <div className="text-blue-100">–°–æ–±—Ä–∞–Ω–æ —Ç—Ä–µ–Ω–¥–æ–≤</div>
        </div>
        <div className="bg-gradient-to-r from-green-500 to-green-600 text-white p-4 rounded-lg">
          <div className="text-3xl font-bold">{stats.totals?.content || 0}</div>
          <div className="text-green-100">–°–æ–∑–¥–∞–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</div>
        </div>
        <div className="bg-gradient-to-r from-purple-500 to-purple-600 text-white p-4 rounded-lg">
          <div className="text-3xl font-bold">{stats.totals?.publications || 0}</div>
          <div className="text-purple-100">–ü—É–±–ª–∏–∫–∞—Ü–∏–π</div>
        </div>
      </div>

      {stats.platform_stats && (
        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-3">üì± –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
            {Object.entries(stats.platform_stats).map(([platform, count]) => (
              <div key={platform} className="bg-gray-50 p-3 rounded-lg text-center">
                <div className="font-semibold text-lg">{count}</div>
                <div className="text-sm text-gray-600 capitalize">{platform}</div>
              </div>
            ))}
          </div>
        </div>
      )}

      {stats.recent_trends && stats.recent_trends.length > 0 && (
        <div>
          <h3 className="text-lg font-semibold mb-3">üî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã:</h3>
          <div className="space-y-2">
            {stats.recent_trends.slice(0, 3).map((trend, idx) => (
              <div key={idx} className="bg-gray-50 p-3 rounded-lg">
                <div className="font-medium text-sm">{trend.title}</div>
                <div className="text-xs text-gray-500">
                  {trend.source} ‚Ä¢ Score: {trend.popularity_score}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞–º–∏
const TrendsManager = ({ onTrendsUpdate, onSelectedTrendsUpdate }) => {
  const [trends, setTrends] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedTrends, setSelectedTrends] = useState([]);

  const collectTrends = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`${API}/trends`);
      setTrends(response.data.trends);
      onTrendsUpdate(response.data.trends);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Ç—Ä–µ–Ω–¥–æ–≤:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Ç—Ä–µ–Ω–¥–æ–≤");
    } finally {
      setLoading(false);
    }
  };

  const toggleTrendSelection = (trendId) => {
    const newSelectedTrends = selectedTrends.includes(trendId) 
      ? selectedTrends.filter(id => id !== trendId)
      : [...selectedTrends, trendId];
    
    setSelectedTrends(newSelectedTrends);
    onSelectedTrendsUpdate(newSelectedTrends);
  };

  return (
    <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800">üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞–º–∏</h2>
        <button 
          onClick={collectTrends}
          disabled={loading}
          className="bg-green-500 hover:bg-green-600 disabled:bg-gray-400 text-white px-6 py-2 rounded-lg transition-colors"
        >
          {loading ? "‚è≥ –°–æ–±–∏—Ä–∞–µ–º..." : "üîç –°–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã"}
        </button>
      </div>

      {trends.length > 0 && (
        <>
          <div className="mb-4 text-sm text-gray-600">
            –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–¥–æ–≤: {trends.length} | –í—ã–±—Ä–∞–Ω–æ: {selectedTrends.length}
          </div>
          
          <div className="max-h-96 overflow-y-auto space-y-3">
            {trends.map((trend, idx) => (
              <div 
                key={trend.id}
                className={`border-2 p-4 rounded-lg cursor-pointer transition-colors ${
                  selectedTrends.includes(trend.id) 
                    ? 'border-blue-500 bg-blue-50' 
                    : 'border-gray-200 hover:border-gray-300'
                }`}
                onClick={() => toggleTrendSelection(trend.id)}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h3 className="font-semibold text-gray-800 mb-1">{trend.title}</h3>
                    <div className="text-sm text-gray-600 mb-2">
                      {trend.source} ‚Ä¢ Score: {trend.popularity_score}
                    </div>
                    {trend.keywords && trend.keywords.length > 0 && (
                      <div className="flex flex-wrap gap-1">
                        {trend.keywords.slice(0, 3).map((keyword, kidx) => (
                          <span key={kidx} className="bg-gray-100 text-xs px-2 py-1 rounded">
                            {keyword}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                  <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                    selectedTrends.includes(trend.id)
                      ? 'bg-blue-500 border-blue-500'
                      : 'border-gray-300'
                  }`}>
                    {selectedTrends.includes(trend.id) && (
                      <span className="text-white text-sm">‚úì</span>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
const ContentGenerator = ({ selectedTrends, onContentGenerated }) => {
  const [platforms] = useState(["telegram", "youtube_shorts", "tiktok"]);
  const [selectedPlatforms, setSelectedPlatforms] = useState(["telegram"]);
  const [generating, setGenerating] = useState(false);
  const [content, setContent] = useState(null);
  const [generateVideos, setGenerateVideos] = useState(false);
  const [withVoice, setWithVoice] = useState(true);
  const [monetize, setMonetize] = useState(true);

  const generateContent = async () => {
    if (selectedTrends.length === 0) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç—Ä–µ–Ω–¥");
      return;
    }

    setGenerating(true);
    try {
      const response = await axios.post(`${API}/content/generate`, {
        trend_ids: selectedTrends,
        platforms: selectedPlatforms
      });
      setContent(response.data.content);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞");
    } finally {
      setGenerating(false);
    }
  };

  const publishToTelegram = async () => {
    if (!content || !content.telegram) {
      alert("–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");
      return;
    }

    try {
      const contentIds = content.telegram.map(item => item.id);
      const response = await axios.post(`${API}/publish/telegram`, {
        content_ids: contentIds,
        channel_key: "main",
        delay_seconds: 10
      });
      alert(`‚úÖ ${response.data.message}`);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram");
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
      <h2 className="text-2xl font-bold text-gray-800 mb-6">ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h2>
      
      <div className="mb-6">
        <h3 className="font-semibold mb-3">üì± –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</h3>
        <div className="flex flex-wrap gap-3">
          {platforms.map(platform => (
            <label key={platform} className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={selectedPlatforms.includes(platform)}
                onChange={(e) => {
                  if (e.target.checked) {
                    setSelectedPlatforms([...selectedPlatforms, platform]);
                  } else {
                    setSelectedPlatforms(selectedPlatforms.filter(p => p !== platform));
                  }
                }}
                className="rounded"
              />
              <span className="capitalize">{platform.replace('_', ' ')}</span>
            </label>
          ))}
        </div>
      </div>

      <div className="flex gap-4 mb-6">
        <button
          onClick={generateContent}
          disabled={generating || selectedTrends.length === 0}
          className="bg-purple-500 hover:bg-purple-600 disabled:bg-gray-400 text-white px-6 py-2 rounded-lg transition-colors"
        >
          {generating ? "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º..." : "üéØ –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"}
        </button>
        
        {content && content.telegram && (
          <button
            onClick={publishToTelegram}
            className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg transition-colors"
          >
            üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ Telegram
          </button>
        )}
      </div>

      {content && (
        <div className="space-y-4">
          <h3 className="font-semibold text-lg">üìù –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:</h3>
          {Object.entries(content).map(([platform, items]) => (
            <div key={platform} className="border rounded-lg p-4">
              <h4 className="font-medium mb-3 capitalize">
                {platform.replace('_', ' ')} ({items.length} –ø–æ—Å—Ç–æ–≤)
              </h4>
              <div className="space-y-3">
                {items.map((item, idx) => (
                  <div key={idx} className="bg-gray-50 p-3 rounded">
                    <div className="font-medium text-sm mb-2">{item.title}</div>
                    <div className="text-sm text-gray-700 mb-2">
                      {item.content.substring(0, 150)}...
                    </div>
                    {item.hashtags && (
                      <div className="flex flex-wrap gap-1">
                        {item.hashtags.slice(0, 5).map((tag, tidx) => (
                          <span key={tidx} className="bg-blue-100 text-xs px-2 py-1 rounded">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

// –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
function App() {
  const [stats, setStats] = useState(null);
  const [trends, setTrends] = useState([]);
  const [selectedTrends, setSelectedTrends] = useState([]);
  const [systemStatus, setSystemStatus] = useState(null);

  const loadDashboardStats = async () => {
    try {
      const response = await axios.get(`${API}/stats/dashboard`);
      setStats(response.data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    }
  };

  const loadSystemStatus = async () => {
    try {
      const response = await axios.get(`${API}/status`);
      setSystemStatus(response.data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", error);
    }
  };

  const runFullAutomation = async () => {
    try {
      const response = await axios.get(`${API}/automation/run`);
      alert(`üöÄ ${response.data.message}\n\n–≠—Ç–∞–ø—ã: ${response.data.steps.join(' ‚Üí ')}\n\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${response.data.estimated_time}`);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
      setTimeout(loadDashboardStats, 10000); // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:", error);
      alert("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏");
    }
  };

  useEffect(() => {
    loadDashboardStats();
    loadSystemStatus();
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-100 via-purple-50 to-pink-100">
      <div className="container mx-auto px-4 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-12">
          <h1 className="text-5xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent mb-4">
            üöÄ EKOSYSTEMA_FULL
          </h1>
          <p className="text-xl text-gray-600 mb-6">
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          </p>
          
          <div className="flex justify-center space-x-4">
            <button
              onClick={runFullAutomation}
              className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-8 py-3 rounded-xl font-semibold shadow-lg transition-all"
            >
              ‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
            </button>
            
            <button
              onClick={loadDashboardStats}
              className="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-8 py-3 rounded-xl font-semibold shadow-lg transition-all"
            >
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </button>
          </div>
        </div>

        {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
        {systemStatus && (
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">‚öôÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {Object.entries(systemStatus.services).map(([service, status]) => (
                <div key={service} className="flex items-center space-x-3">
                  <div className={`w-3 h-3 rounded-full ${status === 'active' ? 'bg-green-500' : 'bg-red-500'}`}></div>
                  <span className="font-medium capitalize">{service.replace('_', ' ')}</span>
                  <span className={`text-sm px-2 py-1 rounded ${status === 'active' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
                    {status}
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <DashboardStats stats={stats} onRefresh={loadDashboardStats} />

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞–º–∏ */}
        <TrendsManager 
          onTrendsUpdate={(newTrends) => setTrends(newTrends)} 
          onSelectedTrendsUpdate={(selected) => setSelectedTrends(selected)}
        />

        {/* –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
        <ContentGenerator 
          selectedTrends={selectedTrends}
          onContentGenerated={(newContent) => {
            console.log("–ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:", newContent);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          }}
        />

        {/* –§—É—Ç–µ—Ä */}
        <div className="text-center text-gray-500 mt-12">
          <p>EKOSYSTEMA_FULL v1.0.0 | –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞</p>
        </div>
      </div>
    </div>
  );
}

export default App;