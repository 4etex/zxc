"""
EKOSYSTEMA_FULL - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
LLM-powered –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:
- –ü–æ—Å—Ç—ã –¥–ª—è Telegram
- –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è YouTube Shorts  
- –¢–µ–∫—Å—Ç—ã –¥–ª—è TikTok
- Instagram –æ–ø–∏—Å–∞–Ω–∏—è
"""
import asyncio
import json
import uuid
import logging
from datetime import datetime
from typing import List, Dict, Optional
from pydantic import BaseModel
import google.generativeai as genai
from .trend_collector import TrendItem


class ContentItem(BaseModel):
    id: str
    trend_id: str
    platform: str
    content_type: str
    title: str
    content: str
    hashtags: List[str]
    keywords: List[str]
    timestamp: datetime
    metadata: Dict = {}

class ContentGenerator:
    def __init__(self, gemini_api_key: str):
        self.gemini_api_key = gemini_api_key
        self.logger = logging.getLogger(__name__)
        
        # Configure Gemini
        genai.configure(api_key=gemini_api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        # –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        self.prompts = {
            "telegram": """–°–æ–∑–¥–∞–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞: "{title}"
            
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª–∏–Ω–∞: 150-300 —Å–ª–æ–≤  
- –°—Ç–∏–ª—å: –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π, –Ω–æ –∂–∏–≤–æ–π
- –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –í–∫–ª—é—á–∏ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
- –°–¥–µ–ª–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∏—Ä—É—Å–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º

–¢—Ä–µ–Ω–¥: {description}
URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {url}

–°–æ–∑–¥–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.""",

            "youtube_shorts": """–°–æ–∑–¥–∞–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è YouTube Shorts –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ç–µ–º—É: "{title}"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 60 —Å–µ–∫—É–Ω–¥ (–ø—Ä–∏–º–µ—Ä–Ω–æ 150-200 —Å–ª–æ–≤)
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –•—É–∫ (5 —Å–µ–∫) ‚Üí –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (45 —Å–µ–∫) ‚Üí –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (10 —Å–µ–∫)
- –°—Ç–∏–ª—å: –¥–∏–Ω–∞–º–∏—á–Ω—ã–π, –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π
- –î–æ–±–∞–≤—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ —Å–∫–æ–±–∫–∞—Ö [–ü–û–ö–ê–ó–ê–¢–¨: ...]
- –°–¥–µ–ª–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–∏—Ä—É—Å–Ω—ã–º

–ò—Å—Ö–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {description}
URL: {url}

–°–æ–∑–¥–∞–π —Ç–æ–ª—å–∫–æ —Å—Ü–µ–Ω–∞—Ä–∏–π, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.""",

            "tiktok": """–°–æ–∑–¥–∞–π —Ç–µ–∫—Å—Ç –¥–ª—è TikTok –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É: "{title}"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª–∏–Ω–∞: 50-100 —Å–ª–æ–≤
- –°—Ç–∏–ª—å: –º–æ–ª–æ–¥—ë–∂–Ω—ã–π, —Ç—Ä–µ–Ω–¥–æ–≤—ã–π
- –ú–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
- –•–µ—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ
- –°–¥–µ–ª–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ü–µ–ø–ª—è—é—â–∏–º –¥–ª—è –º–æ–ª–æ–¥–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {description}
URL: {url}

–°–æ–∑–¥–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.""",

            "instagram": """–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è Instagram –ø–æ—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É: "{title}"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª–∏–Ω–∞: 100-200 —Å–ª–æ–≤
- –°—Ç–∏–ª—å: –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π
- –í–∫–ª—é—á–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏
- –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏
- –ü—Ä–∏–∑—ã–≤ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é (–ª–∞–π–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {description}
URL: {url}

–°–æ–∑–¥–∞–π —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞."""
        }

    async def generate_content_for_trend(self, trend: TrendItem, platform: str) -> ContentItem:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            prompt_template = self.prompts.get(platform, self.prompts["telegram"])
            prompt = prompt_template.format(
                title=trend.title,
                description=trend.description or "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è —Ç–µ–º–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                url=trend.url
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ Gemini
            response = await asyncio.to_thread(self.model.generate_content, prompt)
            generated_content = response.text
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            hashtags = self._extract_hashtags(generated_content, platform)
            
            content_item = ContentItem(
                id=str(uuid.uuid4()),
                trend_id=trend.id,
                platform=platform,
                content_type="text",
                title=trend.title[:100],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
                content=generated_content,
                hashtags=hashtags,
                keywords=trend.keywords,
                timestamp=datetime.utcnow(),
                metadata={
                    "source_url": trend.url,
                    "source_platform": trend.source,
                    "popularity_score": trend.popularity_score,
                    "trend_category": trend.category
                }
            )
            
            self.logger.info(f"–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {platform}: {trend.title[:50]}...")
            return content_item
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {platform}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return self._create_fallback_content(trend, platform)

    async def generate_batch_content(self, trends: List[TrendItem], platforms: List[str]) -> Dict[str, List[ContentItem]]:
        """–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        content_batch = {platform: [] for platform in platforms}
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        limited_trends = trends[:5]  # –ë–µ—Ä—ë–º —Ç–æ–ø-5 —Ç—Ä–µ–Ω–¥–æ–≤
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        tasks = []
        for trend in limited_trends:
            for platform in platforms:
                task = self.generate_content_for_trend(trend, platform)
                tasks.append((task, platform))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        semaphore = asyncio.Semaphore(3)  # –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        
        async def limited_task(task_data):
            task, platform = task_data
            async with semaphore:
                return await task, platform
        
        results = await asyncio.gather(*[limited_task(task_data) for task_data in tasks])
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        for content_item, platform in results:
            if content_item:
                content_batch[platform].append(content_item)
        
        self.logger.info(f"–°–æ–∑–¥–∞–Ω–æ {sum(len(items) for items in content_batch.values())} –µ–¥–∏–Ω–∏—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        return content_batch

    def _extract_hashtags(self, content: str, platform: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        hashtags = []
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        import re
        existing_tags = re.findall(r'#\w+', content)
        hashtags.extend([tag.lower() for tag in existing_tags])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –µ—Å–ª–∏ –∏—Ö –º–∞–ª–æ
        if len(hashtags) < 3:
            platform_hashtags = {
                "telegram": ["#–Ω–æ–≤–æ—Å—Ç–∏", "#—Ç—Ä–µ–Ω–¥—ã", "#–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ"],
                "youtube_shorts": ["#shorts", "#—Ç—Ä–µ–Ω–¥", "#–≤–∏—Ä—É—Å–Ω–æ–µ"],  
                "tiktok": ["#fyp", "#viral", "#trending"],
                "instagram": ["#insta", "#reels", "#trending"]
            }
            hashtags.extend(platform_hashtags.get(platform, []))
        
        return list(set(hashtags[:10]))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10

    def _create_fallback_content(self, trend: TrendItem, platform: str) -> ContentItem:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ LLM"""
        fallback_content = {
            "telegram": f"üî• –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞: {trend.title}\n\nüìà –°–µ–π—á–∞—Å –≤—Å–µ –æ–±—Å—É–∂–¥–∞—é—Ç —ç—Ç–æ! –ß—Ç–æ –¥—É–º–∞–µ—Ç–µ?\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {trend.url}",
            "youtube_shorts": f"[–ó–ê–°–¢–ê–í–ö–ê] {trend.title}\n\n[–û–°–ù–û–í–ù–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï] –≠—Ç–æ—Ç —Ç—Ä–µ–Ω–¥ –ø–æ–∫–æ—Ä–∏–ª –∏–Ω—Ç–µ—Ä–Ω–µ—Ç! –†–∞—Å—Å–∫–∞–∂–µ–º –≤—Å—ë —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥.\n\n[–ü–†–ò–ó–´–í] –°—Ç–∞–≤—å –ª–∞–π–∫ –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
            "tiktok": f"üî• {trend.title} üî•\n\n–í—Å–µ –≥–æ–≤–æ—Ä—è—Ç –æ–± —ç—Ç–æ–º! üò±\n\n#viral #—Ç—Ä–µ–Ω–¥ #fyp",
            "instagram": f"‚ú® {trend.title}\n\nüî• –ì–æ—Ä—è—á–∞—è —Ç–µ–º–∞ –¥–Ω—è! –ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?\n\n#trending #insta #hot"
        }
        
        return ContentItem(
            id=str(uuid.uuid4()),
            trend_id=trend.id,
            platform=platform,
            content_type="text",
            title=trend.title,
            content=fallback_content.get(platform, trend.title),
            hashtags=["#—Ç—Ä–µ–Ω–¥", "#–Ω–æ–≤–æ—Å—Ç–∏"],
            keywords=trend.keywords,
            timestamp=datetime.utcnow(),
            metadata={"fallback": True, "source_url": trend.url}
        )

    def generate_content_report(self, content_batch: Dict[str, List[ContentItem]]) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        report = {
            "total_content": sum(len(items) for items in content_batch.values()),
            "platforms": {},
            "top_hashtags": {},
            "generation_time": datetime.utcnow().isoformat(),
            "content_summary": []
        }
        
        for platform, content_items in content_batch.items():
            platform_stats = {
                "count": len(content_items),
                "avg_length": sum(len(item.content) for item in content_items) // len(content_items) if content_items else 0,
                "hashtags_count": sum(len(item.hashtags) for item in content_items)
            }
            report["platforms"][platform] = platform_stats
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏
            for item in content_items:
                for hashtag in item.hashtags:
                    report["top_hashtags"][hashtag] = report["top_hashtags"].get(hashtag, 0) + 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            for item in content_items[:2]:  # –ü–æ 2 –ø—Ä–∏–º–µ—Ä–∞ —Å –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                report["content_summary"].append({
                    "platform": platform,
                    "title": item.title,
                    "content_preview": item.content[:100] + "..." if len(item.content) > 100 else item.content,
                    "hashtags": item.hashtags
                })
        
        return report


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è  
async def main():
    from trend_collector import TrendCollector
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç—Ä–µ–Ω–¥—ã
    collector = TrendCollector(youtube_api_key="AIzaSyCuWvZcQuOG8pPgkAMPY5_QmPaql7tZUcI")
    trends = await collector.collect_all_trends()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    generator = ContentGenerator(gemini_api_key="AIzaSyBSArxA7X_nUg-S41JketY3nLqR3VWGCTw")
    platforms = ["telegram", "youtube_shorts", "tiktok"]
    
    content_batch = await generator.generate_batch_content(trends[:3], platforms)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for platform, content_items in content_batch.items():
        print(f"\nüéØ {platform.upper()} ({len(content_items)} –ø–æ—Å—Ç–æ–≤):")
        for item in content_items:
            print(f"  üìù {item.title}")
            print(f"     {item.content[:100]}...")
            print(f"     üè∑Ô∏è {', '.join(item.hashtags[:3])}")
    
    # –û—Ç—á—ë—Ç
    report = generator.generate_content_report(content_batch)
    print(f"\nüìä –°–æ–∑–¥–∞–Ω–æ {report['total_content']} –µ–¥–∏–Ω–∏—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {len(report['platforms'])} –ø–ª–∞—Ç—Ñ–æ—Ä–º")

if __name__ == "__main__":
    asyncio.run(main())