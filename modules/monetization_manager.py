"""
–ú–æ–¥—É–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è EKOSYSTEMA_FULL
–£–ø—Ä–∞–≤–ª—è–µ—Ç CPA —Å—Å—ã–ª–∫–∞–º–∏, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import os
import logging
import uuid
from typing import List, Dict, Optional
from datetime import datetime, timedelta
import asyncio
import aiohttp
from pathlib import Path
import json
import hashlib

logger = logging.getLogger(__name__)

class AffiliateLink:
    """–ú–æ–¥–µ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏"""
    def __init__(self, link_id: str, platform: str, url: str, commission_rate: float,
                 category: str, description: str = "", is_active: bool = True):
        self.id = link_id
        self.platform = platform
        self.url = url
        self.commission_rate = commission_rate
        self.category = category
        self.description = description
        self.is_active = is_active
        self.clicks = 0
        self.conversions = 0
        self.earnings = 0.0
        self.created_at = datetime.now()
        
    def to_dict(self):
        return {
            "id": self.id,
            "platform": self.platform,
            "url": self.url,
            "commission_rate": self.commission_rate,
            "category": self.category,
            "description": self.description,
            "is_active": self.is_active,
            "clicks": self.clicks,
            "conversions": self.conversions,
            "earnings": self.earnings,
            "created_at": self.created_at.isoformat()
        }

class MonetizationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º"""
    
    def __init__(self):
        self.links = []
        self.telegram_refs = []
        self.earnings_data = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CPA —Å–µ—Ç–µ–π
        self.cpa_networks = {
            "admitad": {
                "name": "Admitad",
                "api_url": "https://api.admitad.com/",
                "categories": ["telegram", "finance", "crypto", "education"]
            },
            "cityads": {
                "name": "CityAds", 
                "api_url": "https://api.cityads.com/",
                "categories": ["shopping", "services", "apps"]
            },
            "telegram_programs": {
                "name": "Telegram Programs",
                "categories": ["bots", "channels", "mini_apps", "stars"]
            }
        }
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
        self._initialize_default_links()
    
    def _initialize_default_links(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏"""
        default_links = [
            {
                "platform": "telegram",
                "url": "https://t.me/BotFather?start=ref123",
                "commission_rate": 5.0,
                "category": "telegram_bots",
                "description": "–°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–æ–≤ - –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –¥–æ $500/–º–µ—Å"
            },
            {
                "platform": "crypto",
                "url": "https://example-crypto-exchange.com/ref/123456",
                "commission_rate": 30.0,
                "category": "crypto_exchange",
                "description": "–ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞ - –∫–æ–º–∏—Å—Å–∏—è —Å –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏"
            },
            {
                "platform": "education", 
                "url": "https://example-course.com/?ref=content123",
                "commission_rate": 40.0,
                "category": "online_courses",
                "description": "–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"
            },
            {
                "platform": "telegram",
                "url": "https://t.me/premium",
                "commission_rate": 15.0,
                "category": "telegram_premium",
                "description": "Telegram Premium –ø–æ–¥–ø–∏—Å–∫–∞"
            }
        ]
        
        for link_data in default_links:
            link = AffiliateLink(
                link_id=str(uuid.uuid4()),
                **link_data
            )
            self.links.append(link)
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.links)} –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫")
    
    async def find_relevant_links(self, content: str, category: str = None, 
                                platform: str = None) -> List[AffiliateLink]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        relevant_links = []
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        keywords_map = {
            "telegram": ["—Ç–µ–ª–µ–≥—Ä–∞–º", "telegram", "–±–æ—Ç", "–∫–∞–Ω–∞–ª", "—á–∞—Ç"],
            "crypto": ["–∫—Ä–∏–ø—Ç–æ", "bitcoin", "–±–∏—Ç–∫–æ–∏–Ω", "–±–ª–æ–∫—á–µ–π–Ω", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"],
            "finance": ["–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–¥–µ–Ω—å–≥–∏", "–¥–æ—Ö–æ–¥", "—Ñ–∏–Ω–∞–Ω—Å—ã", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"],
            "education": ["–∫—É—Ä—Å", "–æ–±—É—á–µ–Ω–∏–µ", "–Ω–∞–≤—ã–∫–∏", "–∑–Ω–∞–Ω–∏—è", "—É—á–∏—Ç—å—Å—è"]
        }
        
        content_lower = content.lower()
        
        for link in self.links:
            if not link.is_active:
                continue
                
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
            if platform and link.platform != platform:
                continue
                
            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category and link.category != category:
                continue
            
            # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            link_keywords = keywords_map.get(link.platform, [])
            if any(keyword in content_lower for keyword in link_keywords):
                relevant_links.append(link)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–º–∏—Å—Å–∏–∏ (–≤—ã—à–µ –∫–æ–º–∏—Å—Å–∏—è = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        relevant_links.sort(key=lambda x: x.commission_rate, reverse=True)
        
        return relevant_links[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
    
    def generate_tracked_link(self, affiliate_link: AffiliateLink, 
                            content_id: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—É—é —Å—Å—ã–ª–∫—É"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ –∫–æ–¥
        tracking_data = f"{affiliate_link.id}_{content_id}_{datetime.now().timestamp()}"
        tracking_hash = hashlib.md5(tracking_data.encode()).hexdigest()[:8]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ —Å—Å—ã–ª–∫–µ
        separator = "&" if "?" in affiliate_link.url else "?"
        tracked_url = f"{affiliate_link.url}{separator}utm_source=ekosystema&utm_campaign={tracking_hash}"
        
        return tracked_url
    
    async def inject_affiliate_links(self, content: Dict, max_links: int = 2) -> Dict:
        """–í–Ω–µ–¥—Ä—è–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç"""
        try:
            content_text = content.get("content", "")
            platform = content.get("platform", "")
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            relevant_links = await self.find_relevant_links(content_text, platform=platform)
            
            if not relevant_links:
                return content
            
            selected_links = relevant_links[:max_links]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_with_links = content.copy()
            original_content = content_with_links.get("content", "")
            
            link_section = "\n\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n"
            for i, link in enumerate(selected_links, 1):
                tracked_url = self.generate_tracked_link(link, content.get("id"))
                link_section += f"{i}. {link.description}\n{tracked_url}\n\n"
            
            content_with_links["content"] = original_content + link_section
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Å—Å—ã–ª–∫–∞—Ö
            content_with_links["affiliate_links"] = [
                {
                    "id": link.id,
                    "platform": link.platform,
                    "commission_rate": link.commission_rate,
                    "tracked_url": self.generate_tracked_link(link, content.get("id"))
                }
                for link in selected_links
            ]
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(selected_links)} –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç")
            return content_with_links
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫: {e}")
            return content
    
    async def generate_telegram_referral(self, bot_username: str, 
                                       campaign: str = "default") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è Telegram –±–æ—Ç–∞"""
        ref_code = f"ref_{campaign}_{uuid.uuid4().hex[:8]}"
        ref_link = f"https://t.me/{bot_username}?start={ref_code}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        self.telegram_refs.append({
            "code": ref_code,
            "bot": bot_username,
            "campaign": campaign,
            "created_at": datetime.now(),
            "clicks": 0,
            "conversions": 0
        })
        
        return ref_link
    
    async def track_click(self, link_id: str, user_id: str = None):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ"""
        for link in self.links:
            if link.id == link_id:
                link.clicks += 1
                logger.info(f"–ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ {link_id}: {link.clicks} –≤—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤")
                break
    
    async def track_conversion(self, link_id: str, amount: float = 0.0):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ"""
        for link in self.links:
            if link.id == link_id:
                link.conversions += 1
                link.earnings += amount * (link.commission_rate / 100)
                logger.info(f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —Å—Å—ã–ª–∫–µ {link_id}: +${amount:.2f}")
                break
    
    def get_earnings_report(self, days: int = 30) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö"""
        total_clicks = sum(link.clicks for link in self.links)
        total_conversions = sum(link.conversions for link in self.links)
        total_earnings = sum(link.earnings for link in self.links)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        platform_stats = {}
        for link in self.links:
            if link.platform not in platform_stats:
                platform_stats[link.platform] = {
                    "clicks": 0,
                    "conversions": 0,
                    "earnings": 0.0,
                    "links_count": 0
                }
            
            platform_stats[link.platform]["clicks"] += link.clicks
            platform_stats[link.platform]["conversions"] += link.conversions
            platform_stats[link.platform]["earnings"] += link.earnings
            platform_stats[link.platform]["links_count"] += 1
        
        return {
            "period_days": days,
            "total_stats": {
                "clicks": total_clicks,
                "conversions": total_conversions,
                "earnings": round(total_earnings, 2),
                "conversion_rate": round((total_conversions / max(total_clicks, 1)) * 100, 2)
            },
            "platform_stats": platform_stats,
            "top_links": sorted(
                [link.to_dict() for link in self.links if link.earnings > 0],
                key=lambda x: x["earnings"],
                reverse=True
            )[:5]
        }
    
    async def optimize_content_monetization(self, content_batch: Dict) -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –±–∞—Ç—á–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        optimized_batch = {}
        
        for platform, content_items in content_batch.items():
            optimized_items = []
            
            for content in content_items:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
                monetized_content = await self.inject_affiliate_links(
                    content.dict() if hasattr(content, 'dict') else content
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é
                monetized_content = self._add_call_to_action(monetized_content, platform)
                
                optimized_items.append(monetized_content)
            
            optimized_batch[platform] = optimized_items
        
        return optimized_batch
    
    def _add_call_to_action(self, content: Dict, platform: str) -> Dict:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –∫–æ–Ω—Ç–µ–Ω—Ç"""
        cta_templates = {
            "telegram": [
                "üëÜ –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞—á–∏–Ω–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!",
                "üí∞ –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥!",
                "üöÄ –ö–ª–∏–∫–∞–π –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å –∫ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ!"
            ],
            "youtube_shorts": [
                "üëÜ –°—Å—ã–ª–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π!",
                "üíé –õ–∞–π–∫ –µ—Å–ª–∏ –ø–æ–º–æ–≥–ª–æ + —Å—Å—ã–ª–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏!",
                "üî• –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏!"
            ],
            "tiktok": [
                "üëÜ –õ–∏–Ω–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏ –±—ã—Å—Ç—Ä–µ–µ!",
                "üí∞ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –≤ –ø—Ä–æ—Ñ–∏–ª–µ!",
                "üöÄ –ï—â–µ –±–æ–ª—å—à–µ —Å–ø–æ—Å–æ–±–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ!"
            ]
        }
        
        ctas = cta_templates.get(platform, cta_templates["telegram"])
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π CTA
        import random
        selected_cta = random.choice(ctas)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        enhanced_content = content.copy()
        original_text = enhanced_content.get("content", "")
        enhanced_content["content"] = f"{original_text}\n\n{selected_cta}"
        
        return enhanced_content
    
    def add_custom_affiliate_link(self, platform: str, url: str, commission_rate: float,
                                category: str, description: str = "") -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É"""
        link = AffiliateLink(
            link_id=str(uuid.uuid4()),
            platform=platform,
            url=url,
            commission_rate=commission_rate,
            category=category,
            description=description
        )
        
        self.links.append(link)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞: {platform} - {commission_rate}%")
        return link.id

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    monetization = MonetizationManager()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    test_content = {
        "id": "test_content_1",
        "title": "–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ Telegram",
        "content": "–°–µ–≥–æ–¥–Ω—è —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ —Ç–æ–ø —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º. –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "platform": "telegram"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
    monetized = await monetization.inject_affiliate_links(test_content)
    print("–ú–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:")
    print(monetized["content"])
    
    # –û—Ç—á–µ—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö
    report = monetization.get_earnings_report()
    print("\n–û—Ç—á–µ—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö:")
    print(f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: ${report['total_stats']['earnings']}")

if __name__ == "__main__":
    asyncio.run(main())