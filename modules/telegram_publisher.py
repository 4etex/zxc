"""
EKOSYSTEMA_FULL - Telegram –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã
"""
import asyncio
import logging
import uuid
from datetime import datetime
from typing import List, Dict, Optional
from pydantic import BaseModel
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from .content_generator import ContentItem


class TelegramPost(BaseModel):
    id: str
    content_id: str
    channel_id: str
    message_id: int
    status: str
    timestamp: datetime
    engagement: Dict = {}

class TelegramPublisher:
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.bot = Bot(token=bot_token)
        self.logger = logging.getLogger(__name__)
        self.published_posts: List[TelegramPost] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.channels = {
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "main": "@your_main_channel",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
            "news": "@your_news_channel",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
        }

    async def publish_content(self, content_item: ContentItem, channel_key: str = "main") -> Optional[TelegramPost]:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Telegram"""
        try:
            channel_id = self.channels.get(channel_key)
            if not channel_id:
                self.logger.error(f"–ö–∞–Ω–∞–ª {channel_key} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = self._format_message(content_item)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await self.bot.send_message(
                chat_id=channel_id,
                text=message_text,
                parse_mode='HTML',
                disable_web_page_preview=False
            )
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            telegram_post = TelegramPost(
                id=str(uuid.uuid4()),
                content_id=content_item.id,
                channel_id=channel_id,
                message_id=message.message_id,
                status="published",
                timestamp=datetime.utcnow()
            )
            
            self.published_posts.append(telegram_post)
            self.logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç –≤ {channel_id}: {content_item.title[:50]}")
            
            return telegram_post
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")
            # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            self.logger.info(f"DEMO MODE - –ü–æ—Å—Ç –¥–ª—è {channel_key}:")
            self.logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {content_item.title}")
            self.logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç: {content_item.content}")
            self.logger.info(f"–•–µ—à—Ç–µ–≥–∏: {', '.join(content_item.hashtags)}")
            
            # –°–æ–∑–¥–∞—ë–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –¥–µ–º–æ
            return TelegramPost(
                id=str(uuid.uuid4()),
                content_id=content_item.id,
                channel_id=f"demo_{channel_key}",
                message_id=999999,
                status="demo_published",
                timestamp=datetime.utcnow()
            )

    async def publish_batch(self, content_items, channel_key: str = "main", delay_seconds: int = 10) -> List[TelegramPost]:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å dict –∏ ContentItem"""
        published_posts = []
        
        for i, content_item in enumerate(content_items):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if hasattr(content_item, 'dict'):
                # –≠—Ç–æ ContentItem –æ–±—ä–µ–∫—Ç
                item_data = content_item
            elif isinstance(content_item, dict):
                # –≠—Ç–æ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
                from .content_generator import ContentItem
                try:
                    item_data = ContentItem(**content_item)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ContentItem: {e}")
                    self.logger.info(f"–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_item}")
                    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    item_data = self._create_fallback_content_item(content_item)
            else:
                self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {type(content_item)}")
                continue
            
            # –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            post = await self.publish_content(item_data, channel_key)
            if post:
                published_posts.append(post)
        """–ü–∞–∫–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        published_posts = []
        
        for i, content_item in enumerate(content_items):
            # –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            post = await self.publish_content(content_item, channel_key)
            if post:
                published_posts.append(post)
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(content_items) - 1:
                await asyncio.sleep(delay_seconds)
                self.logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay_seconds} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
        
        self.logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {len(published_posts)} –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª {channel_key}")
        return published_posts

    def _format_message(self, content_item: ContentItem) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
        message_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        message_parts.append(content_item.content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        if content_item.hashtags and not any('#' in content_item.content for _ in content_item.hashtags):
            hashtags_line = " ".join(content_item.hashtags)
            message_parts.append(f"\n{hashtags_line}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if content_item.metadata.get('source_url'):
            source_url = content_item.metadata['source_url']
            message_parts.append(f"\n\nüîó <a href='{source_url}'>–ò—Å—Ç–æ—á–Ω–∏–∫</a>")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫–∞–Ω–∞–ª–∞
        message_parts.append(f"\n\nüì∫ <b>EKOSYSTEMA</b> | <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç</i>")
        
        return "".join(message_parts)

    async def get_channel_info(self, channel_key: str = "main") -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            channel_id = self.channels.get(channel_key)
            if not channel_id:
                return {"error": f"–ö–∞–Ω–∞–ª {channel_key} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
            
            chat = await self.bot.get_chat(channel_id)
            
            return {
                "id": chat.id,
                "title": chat.title,
                "type": chat.type,
                "description": chat.description,
                "member_count": await self.bot.get_chat_member_count(channel_id) if chat.type in ['group', 'supergroup'] else None,
                "username": chat.username
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            return {"error": str(e)}

    def get_publishing_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        if not self.published_posts:
            return {"message": "–ü—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"}
        
        stats = {
            "total_posts": len(self.published_posts),
            "channels": {},
            "recent_posts": [],
            "status_breakdown": {}
        }
        
        for post in self.published_posts:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
            channel = post.channel_id
            if channel not in stats["channels"]:
                stats["channels"][channel] = {"count": 0, "last_post": None}
            stats["channels"][channel]["count"] += 1
            stats["channels"][channel]["last_post"] = post.timestamp.isoformat()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status = post.status
            stats["status_breakdown"][status] = stats["status_breakdown"].get(status, 0) + 1
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å—Ç–æ–≤
        recent = sorted(self.published_posts, key=lambda x: x.timestamp, reverse=True)[:5]
        for post in recent:
            stats["recent_posts"].append({
                "id": post.id,
                "channel": post.channel_id,
                "status": post.status,
                "timestamp": post.timestamp.isoformat()
            })
        
        return stats

    async def setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        commands = [
            ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            ("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
            ("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"),
            ("channels", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö"),
        ]
        
        await self.bot.set_my_commands(commands)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """
ü§ñ <b>EKOSYSTEMA Bot</b>

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π  
/channels - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö

üî• –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ!
        """
        await update.message.reply_text(welcome_text, parse_mode='HTML')

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ EKOSYSTEMA Bot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤ –∏–∑ YouTube, Reddit
ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∫–∞–Ω–∞–ª—ã

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/channels - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö

<b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ 24/7!</b>
        """
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        stats = self.get_publishing_stats()
        
        if "message" in stats:
            await update.message.reply_text(stats["message"])
            return
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π</b>

üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats['total_posts']}
üì∫ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(stats['channels'])}

<b>–ü–æ –∫–∞–Ω–∞–ª–∞–º:</b>
        """
        
        for channel, data in stats['channels'].items():
            stats_text += f"\n‚Ä¢ {channel}: {data['count']} –ø–æ—Å—Ç–æ–≤"
        
        await update.message.reply_text(stats_text, parse_mode='HTML')


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    from content_generator import ContentGenerator
    from trend_collector import TrendCollector
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    collector = TrendCollector(youtube_api_key="AIzaSyCuWvZcQuOG8pPgkAMPY5_QmPaql7tZUcI") 
    generator = ContentGenerator(gemini_api_key="AIzaSyBSArxA7X_nUg-S41JketY3nLqR3VWGCTw")
    publisher = TelegramPublisher(bot_token="8272796200:AAElpR54wTR7kdtxs0pulNB6ZMUg6ZC4AKo")
    
    # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Ç—Ä–µ–Ω–¥—ã ‚Üí –∫–æ–Ω—Ç–µ–Ω—Ç ‚Üí –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    print("üîç –°–æ–±–∏—Ä–∞–µ–º —Ç—Ä–µ–Ω–¥—ã...")
    trends = await collector.collect_all_trends()
    
    print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç...")
    content_batch = await generator.generate_batch_content(trends[:3], ["telegram"])
    telegram_content = content_batch.get("telegram", [])
    
    if telegram_content:
        print(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º {len(telegram_content)} –ø–æ—Å—Ç–æ–≤...")
        published = await publisher.publish_batch(telegram_content, delay_seconds=5)
        
        print(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {len(published)} –ø–æ—Å—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = publisher.get_publishing_stats()
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_posts']} –ø–æ—Å—Ç–æ–≤ –≤ {len(stats['channels'])} –∫–∞–Ω–∞–ª–∞—Ö")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Telegram")

if __name__ == "__main__":
    asyncio.run(main())