"""
YouTube Shorts Publisher –¥–ª—è EKOSYSTEMA_FULL
–ü—É–±–ª–∏–∫—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube —á–µ—Ä–µ–∑ YouTube Data API
"""

import os
import logging
from typing import List, Dict, Optional
from pathlib import Path
import asyncio
from datetime import datetime

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

logger = logging.getLogger(__name__)

class YouTubePublisher:
    """–ü—É–±–ª–∏–∫–∞—Ç–æ—Ä –¥–ª—è YouTube Shorts"""
    
    SCOPES = ['https://www.googleapis.com/auth/youtube.upload']
    
    def __init__(self, api_key: str = None):
        self.api_key = api_key
        self.service = None
        self.credentials_path = "/app/credentials/youtube_credentials.json"
        self.token_path = "/app/credentials/youtube_token.json"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        Path(self.credentials_path).parent.mkdir(exist_ok=True)
        
    async def authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ YouTube API"""
        try:
            creds = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
            if os.path.exists(self.token_path):
                creds = Credentials.from_authorized_user_file(self.token_path, self.SCOPES)
            
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º
            if not creds or not creds.valid:
                if creds and creds.expired and creds.refresh_token:
                    creds.refresh(Request())
                else:
                    # –ù—É–∂–Ω–∞ –ø–µ—Ä–≤–∏—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                    if not os.path.exists(self.credentials_path):
                        logger.warning("YouTube credentials file not found. Using API key only mode.")
                        return False
                    
                    flow = InstalledAppFlow.from_client_secrets_file(
                        self.credentials_path, self.SCOPES)
                    creds = flow.run_local_server(port=0)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
                with open(self.token_path, 'w') as token:
                    token.write(creds.to_json())
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
            self.service = build('youtube', 'v3', credentials=creds)
            logger.info("YouTube API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ YouTube: {e}")
            return False
    
    async def upload_video(self, video_path: str, title: str, description: str = "", 
                          tags: List[str] = None, category_id: str = "22") -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ YouTube
        
        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ
            description: –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            tags: –¢–µ–≥–∏ –≤–∏–¥–µ–æ
            category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (22 = People & Blogs)
            
        Returns:
            ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.service:
            if not await self.authenticate():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ YouTube")
                return None
        
        if not os.path.exists(video_path):
            logger.error(f"–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
            return None
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            body = {
                'snippet': {
                    'title': title[:100],  # YouTube limit
                    'description': self._format_description(description, tags),
                    'tags': tags[:10] if tags else [],  # Max 10 tags
                    'categoryId': category_id
                },
                'status': {
                    'privacyStatus': 'public',  # –∏–ª–∏ 'private', 'unlisted'
                    'selfDeclaredMadeForKids': False
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏–µ —á—Ç–æ —ç—Ç–æ Shorts (–¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ)
            if self._is_shorts_format(video_path):
                body['snippet']['description'] += "\n\n#Shorts"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            media = MediaFileUpload(
                video_path,
                chunksize=-1,
                resumable=True,
                mimetype="video/mp4"
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            request = self.service.videos().insert(
                part=','.join(body.keys()),
                body=body,
                media_body=media
            )
            
            response = None
            error = None
            retry = 0
            
            while response is None:
                try:
                    status, response = request.next_chunk()
                    if status:
                        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ {int(status.progress() * 100)}%")
                except Exception as e:
                    error = e
                    retry += 1
                    if retry > 3:
                        break
                    await asyncio.sleep(2 ** retry)
            
            if response:
                video_id = response.get('id')
                logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ YouTube: {video_id}")
                return video_id
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube: {error}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ YouTube: {e}")
            return None
    
    def _format_description(self, description: str, tags: List[str] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è YouTube"""
        formatted_desc = description[:5000]  # YouTube limit
        
        if tags:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
            hashtags = [f"#{tag.replace('#', '').replace(' ', '')}" for tag in tags[:3]]
            formatted_desc += f"\n\n{' '.join(hashtags)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ —Ç–µ–∫—Å—Ç
        formatted_desc += "\n\nüîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ!"
        formatted_desc += "\nüí¨ –ü–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!"
        
        return formatted_desc
    
    def _is_shorts_format(self, video_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–º Shorts (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)"""
        try:
            import subprocess
            cmd = [
                "ffprobe", "-v", "quiet", "-print_format", "json",
                "-show_streams", video_path
            ]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                import json
                data = json.loads(result.stdout)
                
                for stream in data.get('streams', []):
                    if stream.get('codec_type') == 'video':
                        width = stream.get('width', 0)
                        height = stream.get('height', 0)
                        
                        # YouTube Shorts: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (–≤—ã—Å–æ—Ç–∞ > —à–∏—Ä–∏–Ω—ã)
                        return height > width
            
            return False
        except Exception:
            return False
    
    async def upload_batch_videos(self, videos_info: List[Dict]) -> List[Optional[str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ"""
        video_ids = []
        
        for video_info in videos_info:
            try:
                video_id = await self.upload_video(
                    video_path=video_info.get('video_path'),
                    title=video_info.get('title', 'YouTube Short'),
                    description=video_info.get('script', ''),
                    tags=video_info.get('hashtags', [])
                )
                video_ids.append(video_id)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
                await asyncio.sleep(10)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ {video_info.get('title', '')}: {e}")
                video_ids.append(None)
        
        return video_ids
    
    async def get_channel_info(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        if not self.service:
            if not await self.authenticate():
                return None
        
        try:
            request = self.service.channels().list(
                part='snippet,statistics',
                mine=True
            )
            response = request.execute()
            
            if response.get('items'):
                channel = response['items'][0]
                return {
                    'id': channel.get('id'),
                    'title': channel['snippet'].get('title'),
                    'subscribers': channel['statistics'].get('subscriberCount', '0'),
                    'videos': channel['statistics'].get('videoCount', '0'),
                    'views': channel['statistics'].get('viewCount', '0')
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
        
        return None
    
    def create_credentials_template(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        template = {
            "installed": {
                "client_id": "YOUR_CLIENT_ID.apps.googleusercontent.com",
                "project_id": "your-project-id",
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                "client_secret": "YOUR_CLIENT_SECRET",
                "redirect_uris": ["http://localhost"]
            }
        }
        
        import json
        with open(self.credentials_path, 'w') as f:
            json.dump(template, f, indent=2)
        
        return self.credentials_path

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    publisher = YouTubePublisher()
    
    # –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
    video_info = {
        'video_path': '/path/to/video.mp4',
        'title': '–¢–µ—Å—Ç YouTube Shorts',
        'script': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ YouTube',
        'hashtags': ['#test', '#shorts', '#youtube']
    }
    
    if await publisher.authenticate():
        video_id = await publisher.upload_video(
            video_info['video_path'],
            video_info['title'],
            video_info['script'],
            video_info['hashtags']
        )
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ: {video_id}")
    else:
        print("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

if __name__ == "__main__":
    asyncio.run(main())